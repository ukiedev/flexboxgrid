// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
	}
	#{$list} {
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		// Inner gutter via padding
		padding-left: ($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
	}
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-#{$class}-#{$i}";
	}
	#{$list} {
		box-sizing: border-box;
		@include display(flex);
		@include flex(0 1 auto);
		@include flex-direction(column);
		@include flex-grow(0);
		@include flex-shrink(0);
	}
}

@mixin calc-grid-column($index, $class, $type) {
	@if ($type == max-width) and ($index > 0) {
		.col-#{$class}-#{$index} {
			@include flex-basis(percentage(($index / $grid-columns)));
			max-width: percentage(($index / $grid-columns));
		}
	}

	@if ($type == offset) {
		.col-#{$class}-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
	}
}

@mixin calc-grid-flex($class, $type) {
	@if ($type == col) {
		.col-#{$class} {
			@include flex-grow(1);
			@include flex-basis(0);
			max-width: 100%;
		}
	}

	@if ($type == start) {
		.start-#{$class} {
			@include justify-content(flex-start);
			text-align: start;
		}
	}

	@if ($type == center) {
		.center-#{$class} {
			@include justify-content(center);
			text-align: center;
		}
	}

	@if ($type == end) {
		.end-#{$class} {
			@include justify-content(flex-end);
			text-align: end;
		}
	}

	@if ($type == around) {
		.around-#{$class} {
			@include justify-content(space-around);
		}
	}

	@if ($type == between) {
		.between-#{$class} {
			@include justify-content(space-between);
		}
	}


	@if ($type == top) {
		.top-#{$class} {
			@include align-items(flex-start);
		}
	}

	@if ($type == middle) {
		.middle-#{$class} {
			@include align-items(center);
		}
	}

	@if ($type == bottom) {
		.bottom-#{$class} {
			@include align-items(flex-end);
		}
	}

	@if ($type == self) {
		.self-#{$class} {
			@include align-self(center);
		}
	}


}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
	@for $i from 0 through $columns {
		@include calc-grid-column($i, $class, $type);
	}
}

// Create grid for specific class
@mixin make-grid($class) {
	@include grid-columns($class);
	@include calc-grid-flex($class, col);
	@include loop-grid-columns($grid-columns, $class, max-width);
	@include loop-grid-columns($grid-columns, $class, offset);


	@if ($class == xs) {
		@media (max-width: $screen-xs-max) {
			@include calc-grid-flex($class, start);
			@include calc-grid-flex($class, center);
			@include calc-grid-flex($class, end);
			@include calc-grid-flex($class, around);
			@include calc-grid-flex($class, between);
			@include calc-grid-flex($class, top);
			@include calc-grid-flex($class, middle);
			@include calc-grid-flex($class, bottom);
			@include calc-grid-flex($class, self);
			@include calc-grid-flex($class, direction);
		}
	}

	@if ($class == sm) {
		@media (max-width: $screen-sm-max) {
			@include calc-grid-flex($class, start);
			@include calc-grid-flex($class, center);
			@include calc-grid-flex($class, end);
			@include calc-grid-flex($class, around);
			@include calc-grid-flex($class, between);
			@include calc-grid-flex($class, top);
			@include calc-grid-flex($class, middle);
			@include calc-grid-flex($class, bottom);
			@include calc-grid-flex($class, self);
			@include calc-grid-flex($class, direction);
		}
	}

	@if ($class == md) {
		@media (max-width: $screen-md-max) {
			@include calc-grid-flex($class, start);
			@include calc-grid-flex($class, center);
			@include calc-grid-flex($class, end);
			@include calc-grid-flex($class, around);
			@include calc-grid-flex($class, between);
			@include calc-grid-flex($class, top);
			@include calc-grid-flex($class, middle);
			@include calc-grid-flex($class, bottom);
			@include calc-grid-flex($class, self);
			@include calc-grid-flex($class, direction);
		}
	}
}
